****** Interface Collector ******

java.util.stream

public interface Collector<T,A,R>

Параметры типа:
T - тип входных элементов операции приведения
A - изменяемый тип накопления операции редукции (часто скрыт как деталь реализации)
R - тип результата операции редукции

Изменяемая операция редукции, которая накапливает входные элементы в изменяемый контейнер
результатов, дополнительно преобразовывая накопленный результат в окончательное представление
после обработки всех входных элементов. Операции редукции могут выполняться как последовательно,
так и параллельно.

Примеры изменяемых операций сокращения включают:
накопление элементов в коллекцию;
объединение строк с помощью StringBuilder;
вычисление сводной информации об элементах, таких как сумма, минимум, максимум или среднее значение;
вычисление сводок «сводной таблицы», таких как «максимальная стоимость транзакции продавца» и т. д.

Класс Collectors предоставляет реализации многих общих изменяемых редукций.

Collector определяется четырьмя функциями, которые работают вместе для накопления записей в
изменяемый контейнер результатов и, при необходимости, выполняют окончательное преобразование
результата, это:
- создание нового контейнера результатов (supplier())
- включение нового элемента данных в контейнер результатов (accumulator())
- объединение двух контейнеров результатов в один (combiner())
- выполнение необязательного финального преобразования контейнера (finisher())

Коллекторы также имеют набор характеристик, таких как Collector.Characteristics.CONCURRENT,
которые предоставляют подсказки и могут использоваться реализацией сокращения для повышения
производительности.

Последовательная реализация редукции с использованием collector-а создаст один контейнер результатов
с помощью функции поставщика и вызовет функцию накопителя один раз для каждого входного элемента.
Параллельная реализация будет разделять входные данные, создавать контейнер результатов для каждого
раздела, накапливать содержимое каждого раздела в подрезультат для этого раздела, а затем использовать
функцию объединения для объединения подрезультатов в объединенный результат.

Чтобы последовательные и параллельные выполнения давали одинаковые результаты, функции-collector-ы
должны удовлетворять ограничениям идентичности и ассоциативности.

Ограничение идентичности говорит, что для любого частично накопленного результата его объединение
с пустым контейнером результатов должно давать эквивалентный результат. То есть, для частично
накопленного результата 'a', являющегося результатом любой серии вызовов накопителя и объединителя,
'a' должен быть эквивалентен Combiner.apply(a, supplier.get()).

Ограничение ассоциативности говорит, что разделение вычислений должно давать эквивалентный результат.
То есть для любых входных элементов t1 и t2 результаты r1 и r2 в вычислении ниже должны быть
эквивалентны:

******************************************************************************************************
     A a1 = supplier.get();
     accumulator.accept(a1, t1);
     accumulator.accept(a1, t2);
     R r1 = finisher.apply(a1);  // результат без разделения

     A a2 = supplier.get();
     accumulator.accept(a2, t1);
     A a3 = supplier.get();
     accumulator.accept(a3, t2);
     R r2 = finisher.apply(combiner.apply(a2, a3));  // результат с разбиением
******************************************************************************************************

Для collector-ы, у которых нет характеристики UNORDERED, два накопленных результата a1 и a2 эквивалентны,
если finisher.apply(a1).equals(finisher.apply(a2)). Для неупорядоченных collector-ов эквивалентность
ослабляется, чтобы учесть неравноправие, связанное с различиями в порядке. (Например, неупорядоченный
collector, который накапливает элементы в список, будет считать два списка эквивалентными, если они
содержат одни и те же элементы, игнорируя порядок.)

Библиотеки, реализующие сокращение на основе Collector, такие, как Stream.collect(Collector), должны
придерживаться следующих ограничений:

- Первый аргумент, переданный в функцию-аккумулятор, оба аргумента, переданные в функцию-объединитель,
  и аргумент, переданный в функцию-финишер, должны быть результатом предыдущего вызова функций поставщика
  результатов, накопителя или объединителя.

- Реализация не должна ничего делать с результатом какой-либо функции поставщика, накопителя или
  объединителя результатов, кроме как передавать их снова функциям накопителя, объединителя или финишера
  или возвращать их вызывающему объекту операции сокращения.

- Если результат передается в функцию объединения или финишера, а тот же самый объект не возвращается из
  этой функции, он больше никогда не используется. Как только результат передается в функцию объединения
  или финишера, он больше никогда не передается в функцию-аккумулятор.

- Для непараллельных collector-ов любой результат, возвращаемый функциями поставщика результатов, накопителя
  или объединителя, должен быть последовательно ограничен потоком. Это позволяет сбору данных происходить
  параллельно без необходимости для коллектора реализовывать какую-либо дополнительную синхронизацию.
  Реализация редукции должна обеспечивать правильное разделение входных данных, обработку разделов изолированно,
  а объединение происходит только после завершения накопления.

- Для параллельных collector-ов реализация может (но не обязана) реализовывать сокращение одновременно.
  Параллельное сокращение — это когда функция-аккумулятор вызывается одновременно из нескольких потоков
  с использованием одного и того же одновременно изменяемого контейнера результатов, вместо того, чтобы
  сохранять результат изолированным во время накопления.

- Параллельное сокращение следует применять только в том случае, если collector имеет характеристики
  Collector.Characteristics.UNORDERED или если исходные данные не упорядочены.

В дополнение к предопределенным реализациям в коллекторах для создания коллекторов можно использовать
статические фабричные методы (Supplier, BiConsumer, BinaryOperator, Characteristics...).

Например, мы можем создать collector, который собирает виджеты в TreeSet с помощью:

******************************************************************************************************
Collector<Widget, ?, TreeSet<Widget>> intoSet =
         Collector.of(TreeSet::new, TreeSet::add,
                      (left, right) -> { left.addAll(right); return left; });
******************************************************************************************************

(Это поведение также реализуется предопределенным коллектором Collectors.toCollection(Supplier)).

Примечание API:
Выполнение операции сокращения с помощью Collector должно привести к результату, эквивалентному:

******************************************************************************************************
R container = collector.supplier().get();
     for (T t : data)
         collector.accumulator().accept(container, t);
     return collector.finisher().apply(container);
******************************************************************************************************

Однако библиотека может разбить входные данные на разделы, выполнить преобразование разделов, а затем
использовать функцию объединения для объединения частичных результатов для достижения параллельного
сокращения. (В зависимости от конкретной операции редукции это может работать лучше или хуже, в
зависимости от относительной стоимости функций накопителя и сумматора.)

Collectors предназначены для составления; многие методы в Collectors являются функциями, которые берут
collector и создают новый collector. Например, для следующего сборщика, который вычисляет сумму зарплат
потока сотрудников:

******************************************************************************************************
 Collector<Employee, ?, Integer> summingSalaries
         = Collectors.summingInt(Employee::getSalary))
******************************************************************************************************

Если бы мы хотели создать коллектор для подсчета суммы зарплат по отделам, мы могли бы повторно
использовать логику «сумма зарплат», используя Collectors.groupingBy(Function, Collector):

******************************************************************************************************
Collector<Employee, ?, Map<Department, Integer>> summingSalariesByDept
         = Collectors.groupingBy(Employee::getDepartment, summingSalaries);
******************************************************************************************************

****** Вложенный класс ******

static class Collector.Characteristics - Характеристики, указывающие свойства коллектора, которые можно
                                         использовать для оптимизации реализации сокращения.

****** МЕТОДЫ ******

BiConsumer<A,T>	accumulator() - Функция, которая сворачивает значение в
                                изменяемый контейнер результатов.

----------------------------------------------------------------------------------------------------------------
Set<Collector.Characteristics> characteristics() - Возвращает набор Collector.Characteristics,
                                                   указывающий характеристики этого Collector.
                                                   Этот набор должен быть неизменным.

----------------------------------------------------------------------------------------------------------------
BinaryOperator<A> combiner() - Функция, которая принимает два частичных результата и объединяет их.
                               Функция объединения может преобразовать состояние одного аргумента
                               в другой и вернуть его или может вернуть новый контейнер результатов.

----------------------------------------------------------------------------------------------------------------
Function<A,R> finisher() - Выполните окончательное преобразование из типа промежуточного
                           накопления A в тип конечного результата R. Если установлена
                           характеристика IDENTITY_TRANSFORM, можно предположить, что эта
                           функция является преобразованием идентичности с неконтролируемым
                           приведением от A к R.

----------------------------------------------------------------------------------------------------------------
static <T,A,R> Collector<T,A,R>	of(Supplier<A> supplier,
                                   BiConsumer<A,T> accumulator,
                                   BinaryOperator<A> combiner,
                                   Function<A,R> finisher,
                                   Collector.Characteristics... characteristics) - Возвращает новый Collector,
описанный заданными функциями поставщика, накопителя, объединителя и финишера.

Параметры типа:
T - Тип входных элементов для нового коллектора
А - Тип промежуточного накопления нового коллектора
R - окончательный тип результата нового сборщика

Параметры:
supplier - функция поставщика для нового коллектора
accumulator - функция аккумулятора для нового коллектора
combiner - Функция объединения для нового коллектора
finisher - функция финишера для нового коллектора
characteristics - характеристики коллектора для нового коллектора

----------------------------------------------------------------------------------------------------------------
static <T,R> Collector<T,R,R> of(Supplier<R> supplier,
                                 BiConsumer<R,T> accumulator,
                                 BinaryOperator<R> combiner,
                                 Collector.Characteristics... characteristics) - Возвращает новый Collector,
описанный заданными функциями поставщика, накопителя и объединителя. Результирующий коллектор имеет характеристику
Collector.Characteristics.IDENTITY_FINISH.

Параметры типа: T - Тип входных элементов для нового коллектора
                R — тип промежуточного результата накопления и
                    окончательный результат для нового коллектора.

Параметры:
supplier - функция поставщика для нового коллектора
accumulator - функция аккумулятора для нового коллектора
combiner - Функция объединения для нового коллектора
characteristics - характеристики коллектора для нового коллектора

Возвращает: новый Collector

----------------------------------------------------------------------------------------------------------------
Supplier<A>	supplier() - Функция, которая создает и возвращает новый
                         изменяемый контейнер результатов.

******************************************************************************************************
См. более подробно (ENG): https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html
******************************************************************************************************