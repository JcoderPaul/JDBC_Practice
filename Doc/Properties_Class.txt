****** Class Properties ******

public class Properties extends Hashtable<Object,Object>

Все реализованные интерфейсы: Serializable,
                              Cloneable,
                              Map<Object,Object>
Прямые подклассы: Provider

Если просто, то:
Класс Properties унаследован от Hashtable<Object,Object>.
Его даже можно рассматривать как HashTable, который умеет
загружать себя из файла.

Обычно нам нужно выполнить всего две операции – загрузить
в объект Properties данные из какого-нибудь файла, а затем
получить эти свойства с помощью метода getProperty().
И естественно мы можем пользоваться объектом Properties
как HashMap.

Класс Properties представляет постоянный набор свойств.
Свойства можно сохранить в поток или загрузить из потока.
Каждый ключ и соответствующее ему значение в списке
свойств являются строкой.

Список свойств может содержать другой список свойств в
качестве «значений по умолчанию»; этот второй список
свойств ищется, если ключ свойства не найден в исходном
списке свойств.

Поскольку Properties наследуется от Hashtable, методы
put и putAll можно применять к объекту Properties. Их
использование настоятельно не рекомендуется, поскольку
они позволяют вызывающей стороне вставлять записи, чьи
ключи или значения не являются строками. Вместо этого
следует использовать метод setProperty. Если метод
сохранения или сохранения вызывается для
«скомпрометированного» объекта Properties, который
содержит ключ или значение, отличное от строки, вызов
завершится ошибкой. Точно так же вызов метода
propertyNames или list завершится ошибкой, если он
вызывается для «скомпрометированного» объекта Properties,
содержащего ключ, отличный от String.

Методы load(Reader)/store(Writer, String) загружают и
сохраняют свойства из символьного потока и в него в
простом линейно-ориентированном формате, указанном ниже.

Методы load(InputStream)/store(OutputStream, String)
работают так же, как и пара load(Reader)/store(Writer,
String), за исключением того, что поток ввода/вывода
закодирован в кодировке символов ISO 8859-1.

Символы, которые не могут быть напрямую представлены в
этой кодировке, могут быть записаны с использованием
escape-последовательности Unicode, как определено в
разделе 3.3 Спецификации языка Java™.

В escape-последовательности допускается только один
символ «u». Инструмент native2ascii можно использовать
для преобразования файлов свойств в другие кодировки
символов и обратно.

Методы loadFromXML(InputStream) и storeToXML(OutputStream,
String, String) загружают и сохраняют свойства в простом
формате XML. По умолчанию используется кодировка символов
UTF-8, однако при необходимости можно указать другую
кодировку. Документ свойств XML имеет следующее объявление
DOCTYPE:

************************************************************
 <!DOCTYPE properties SYSTEM
 "http://java.sun.com/dtd/properties.dtd">
************************************************************

Нужно знать, что системный URI:
(http://java.sun.com/dtd/properties.dtd) не используется при
экспорте или импорте свойств; он просто служит строкой для
уникальной идентификации DTD, а именно:

************************************************************
 <?xml version="1.0" encoding="UTF-8"?>

    <!-- DTD for properties -->

    <!ELEMENT properties ( comment?, entry* ) >

    <!ATTLIST properties version CDATA #FIXED "1.0">

    <!ELEMENT comment (#PCDATA) >

    <!ELEMENT entry (#PCDATA) >

    <!ATTLIST entry key CDATA #REQUIRED>
************************************************************

Этот класс потокобезопасен: несколько потоков могут совместно
использовать один объект Properties без необходимости внешней
синхронизации.

****** Поля и константы ******

protected Properties - список свойств, содержащий значения по
умолчанию для любых ключей, не найденных в этом списке свойств.

****** Конструкторы ******

Properties() - Создает пустой список свойств без значений по
               умолчанию.

Properties(Properties defaults) - Создает пустой список свойств
                                  с указанными значениями по
                                  умолчанию.

****** Методы ******

String getProperty(String key) - Ищет свойство с указанным ключом в
                                 текущем (заданном) списке свойств.

String getProperty(String key,
                   String defaultValue) - Ищет свойство с указанным
                                          ключом в текущем (заданном)
                                          списке свойств.

void list(PrintStream out) - Распечатывает текущий (заданный) список
                             свойств в указанный выходной поток.

void list(PrintWriter out) - Распечатывает текущий (заданный) список
                             свойств в указанный выходной поток.

void load(InputStream inStream) - Считывает список свойств (пары
                                  ключей и элементов) из входного
                                  потока байтов.

void load(Reader reader) - Считывает список свойств (пары ключей и
                           элементов) из входного потока символов в
                           простом линейном формате.

void loadFromXML(InputStream in) - Загружает все свойства, представленные
                                   XML-документом в указанном входном
                                   потоке, в эту таблицу свойств.

Enumeration<?> propertyNames() - Возвращает перечисление всех ключей в
                                 текущем (заданном) списке свойств,
                                 включая отдельные ключи в списке свойств
                                 по умолчанию, если ключ с таким же
                                 именем еще не был найден в основном
                                 списке свойств.

void save(OutputStream out,
          String comments) - Устарел. Этот метод не создает исключение
                             IOException, если при сохранении списка
                             свойств возникает ошибка ввода-вывода.
                             Предпочтительный способ сохранения списка
                             свойств — с помощью метода:
                             store(OutputStream out, String comment)
                             или метода
                             storeToXML(OutputStream os, String comment).

Object setProperty(String key,
                   String value) - Вызывает метод put Hashtable.

void store(OutputStream out,
           String comments) - Записывает текущий (заданный) список свойств
                              (пары ключей и элементов) в этой таблице
                              свойств в выходной поток в формате, подходящем
                              для загрузки в таблицу свойств с помощью метода
                              load(InputStream).

void store(Writer writer,
           String comments) - Записывает текущий (заданный) список свойств
                              (пары ключей и элементов) в этой таблице
                              свойств в выходной поток символов в формате,
                              подходящем для использования метода load(Reader).

void storeToXML(OutputStream os,
                String comment) - Создает XML-документ, представляющий все
                                  свойства, содержащиеся в этой таблице.

void storeToXML(OutputStream os,
                String comment,
                String encoding) - Создает XML-документ, представляющий все
                                   свойства, содержащиеся в этой таблице, с
                                   использованием указанной кодировки.

Set<String> stringPropertyNames() - Возвращает набор ключей в текущем (заданном)
                                    списке свойств, где ключ и соответствующее ему
                                    значение являются строками, включая отдельные
                                    ключи в списке свойств по умолчанию, если ключ
                                    с таким же именем еще не найден в основном
                                    списке свойств.

Методы, унаследованные от класса java.util.Hashtable: clear, clone, contains,
containsKey, containsValue, elements, entrySet, equals, get, hashCode, isEmpty,
keys, keySet, put, putAll, rehash, remove, size, toString, values.

Методы, унаследованные от класса java.lang.Object: finalize, getClass, notify,
notifyAll, wait, wait, wait

См. более подробную документацию (ENG):
https://docs.oracle.com/javase/7/docs/api/java/util/Properties.html

